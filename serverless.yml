service: omni-toyota

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  tags: ${self:custom.tags}
  stackTags: ${self:custom.tags}
  iamRoleStatements: # default vpc lambda permissions
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
        - "ec2:AssignPrivateIpAddresses"
        - "ec2:UnassignPrivateIpAddresses"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:GetQueueUrl"
        - "sqs:GetQueueAttributes"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "logs:PutSubscriptionFilter"
      Resource:
        - arn:aws:logs:us-east-1:332753493246:destination:bce-logs-cw-destination-us-east-1-${self:provider.stage}
  runtime: nodejs14.x
  environment:
    SERVICE: ${self:service}
    REGION: ${self:custom.region}
    STAGE: ${self:custom.stage}
    TIMEZONE_MASTER: ${ssm:/omni-wt-rt-updates/${self:provider.stage}/timezone-master/ddb.tableName~true}
  deploymentBucket:
    name: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
    serverSideEncryption: AES256

custom:
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  tags:
    Application: OmniToyotaRealTime
    CreateBy: BizCloudExperts
    Environment: ${self:custom.stage}
  logSubscription:
    enabled: true
    # below should always be the same. If cloudwatch destination does not exist for your deployment region, create one first.
    destinationArn: arn:aws:logs:${self:provider.region}:332753493246:destination:bce-logs-cw-destination-${self:provider.region}-${self:provider.stage}
    filterPattern: '{$.service-name = "*"}'
    # roleArn: 'some-arn'

plugins:
  - serverless-offline
  - serverless-plugin-log-subscription

package:
  individually: true

layers:
  OmniToyotaLayer:
    path: lambdaLayer/lib
    name: ${self:service}-layer-${self:provider.stage}
    description: Omni toyota lambda layer for all node modules - ${self:provider.stage}
    compatibleRuntimes:
      - nodejs14.x
    retain: false

functions:
  toyotaSqsToDynamoDB: ${file(config/functions/toyotaSqsToDynamoDB.yml):function}
  toyotaUpdates: ${file(config/functions/toyotaUpdates.yml):function}
  reconciliationReport: ${file(config/functions/reconciliationReport.yml):function}

resources:
  Resources:
    ToyotaDynamoTable: ${file(config/dynamoDB/toyota.yaml):ToyotaDynamoTable}
    ToyotaResponseDynamoTable: ${file(config/dynamoDB/toyotaResponse.yaml):ToyotaResponseDynamoTable}
    ToyotaReconReport: ${file(config/dynamoDB/toyotaReconReport.yaml):ToyotaReconReport}
